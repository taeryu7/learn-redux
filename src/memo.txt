리덕스
리덕스는 리액트 생태계에서 가장 사용률이 높은 상태관리 라이브러리다.
리덕스를 사용하면 만들게 될 컴포넌트들의 상태 관련 로직들을 다른 파일들로 분리시켜서 더욱 효율적으로 관리 할 수 있으며 글로벌 상태관리도 쉬워진다.
Context API를 사용해도 글로벌 상태관리를 할 수있고 상태관리 로직을 분리 할 수 있다.
Context API 와 useReducer Hook 을 사용해서 개발하는 흐름은 리덕스를 사용하는 것과 매우 개발 방식이 유사하다. 
리덕스에서도 리듀서와 액션이라는 개념을 사용한다.

Redux는 Context API 가 지금의 형태로 사용방식이 개선되기도 전에, useReducer 라는 Hook 이 존재하기도 전 부터 만들어진 라이브러리다.
Context API가 개선되기 전에 프로젝트에서 글로벌 상태관리하기가 어려웠었다. 그래서 리덕스가 글로벌 관리 용도로 많이 사용되어 왔다.

npmtrends ↓ 를 통해 알 수 있는 사실은, 리액트를 사용하는 프로젝트 45%가 리덕스를 사용하고 있다.
https://npmtrends.com/react-vs-react-redux-vs-redux

redux 는 리액트에서 사용하기 위해 만들어진 라이브러리이긴 하지만 무조건 리액트와 함께 사용 할 필요는 없다.
일반 JavaScript 환경에서 사용 할 수도 있고 Angular 와 같은 다른 프레임워크에서도 사용되기도 한다.
이러한 이유 때문에 react-redux 보다 redux 의 다운로드 수치가 훨씬 높다.

리덕스가 많이 사용된다고 해서 무조건 리덕스를 써야할 필요는 없다.
어느 도구나 마찬가지로 잘 활용하면 상황에 따라, 취향에 따라 개발 생산성이 좋아질 수 있다.
단순히 글로벌 상태 관리를 위한 것이다면 Context API를 활용하는것만으로 충분 할 수 있다.

리덕스를 사용하는 것 과 Context API를 사용하는 것의 차이
1. 미들웨어
리덕스에는 미들웨어(Middleware)라는 개념이 존재한다. 리덕스로 상태관리를 할 때에 useReducer를 사용할때 접한 리듀서 함수를 사용한다.
리덕스의 미들웨어를 사용하면 액션객체가 리듀서에서 처리되기전에 원하는 작업들을 수행 할 수 있다.
(↓아래에 예시들)

특정 조건에 따라 액션이 무시되게 만들 수 있다.
액션을 콘솔에 출력하거나, 서버쪽에 로깅을 할 수 있다.
액션이 디스패치 됐을 때 이를 수정해서 리듀서에게 전달되도록 할 수 있다.
특정 액션이 발생했을 때 이에 기반하여 다른 액션이 발생되도록 할 수 있다.
특정 액션이 발생했을 때 특정 자바스크립트 함수를 실행시킬 수 있다.

미들웨어는 주로 비동기 잡업을 처리 할때 많이 사용된다.
useReducer Hook 에서도 외부 라이브러리를 사용하면 미들웨어를 사용 할 수도 있다. 자주 사용되는 방식은 아니다.



유용한 함수와, Hooks
Context API와 useReducer를 사용할 때 Context도 새로 만들고, Context의 Provider 설정도 하고,
각 Context를 편하게 사용하기 위해 전용 커스텀 Hook을 새로 만들어서 사용했는데, 리덕스에서 이와 비슷한 작업을 편리하게 해주는 기능이 있다.

connect 함수를 사용하면 리덕스의 상태 또는 액션 생성 함수를 컴포넌트의 props 로 받아올 수 있으며, 
useSelector, useDispatch, useStore 과 같은 Hooks를 사용하면 손쉽게 상태를 조회하거나 액션을 디스패치 할 수 있다.

connect 함수와 useSelector 함수에는 내부적으로 최적화가 잘 이루어져있어서 실제 상태가 바뀔때만 컴포넌트가 리렌더링된다.
Context API를 사용할 때에는 그러한 최적화가 자동으로 이루어져있지 않기 때문에
Context 가 지니고 있는 상태가 바뀌면 해당 Context 의 Provider 내부 컴포넌트들이 모두 리렌더링된다.



// 하나의 커다란 상태
Context API 를 사용해서 글로벌 상태를 관리 할 때에는 일반적으로 기능별로 Context를 만들어서 사용하는 것이 일반적이다.
리덕스에서는 모든 글로벌 상태를 하나의 커다란 객체에 넣어서 사용하는것이 필수다.
디럭스를 사용하면 매번 Context를 새로 만드는 수고를 덜 수 있다


리덕스를 써야하는 상황 정리 

1. 프로젝트의 규모가 큰가?
Yes: 리덕스
No: Context API

2. 비동기 작업을 자주 하게 되는가?
Yes: 리덕스
No: Context API

3. 리덕스를 배워보니까 사용하는게 편한가?
Yes: 리덕스
No: Context API 또는 MobX



리덕스에서 사용되는 키워드 숙지하기

액션 (Action)
상태에 어떠한 변화가 필요하게 될 때 액션이라는것을 발생시킨다.
↓이는 하나의 객체로 표현되고 아래와 같은 형식으로 이루어져있다.
{
  type: "TOGGLE_VALUE"
}

액션 객체는 type 필드를 필수적으로 가지고 있어야하고 그 외의 값들은 개발자 마음대로 넣어줄 수 있다.
{
  type: "ADD_TODO",
  data: {
    id: 0,
    text: "리덕스 배우기"
  }
}
{
  type: "CHANGE_INPUT",
  text: "안녕하세요"
}

액션함수 생성(Action Creator)
액션 생성함수는, 액션을 만드는 함수로, 단순하게 파라미터를 받아와서 액션객체 형태로 만들어준다.
export function addTodo(data) {
  return {
    type: "ADD_TODO",
    data
  };
}
// 화살표 함수로도 만들 수 있다.
export const changeInput = text => ({ 
  type: "CHANGE_INPUT",
  text
});
↑위에같은 액션함수를 만들어서 사용하는 이유는 나중에 컴포넌트에서 더욱 쉽게 액션을 발생시키기 위함이다.
보통 함수 앞에 export 키워드를 붙여서 다른 파일에서 불러와서 사용한다.
리덕스를 사용 할 때 액션 생성함수를 사용하는것이 필수는 아니다. 액션을 발생 시킬때마다 직접 액션객체를 작성 할 수 있다.


리듀서 (Reducer)
리듀서는 변화를 일으키는 함수다. 리듀서는 두가지의 파라미터를 받아온다.

function reducer(state, action) {
  // 상태 업데이트 로직
  return alteredState;
}
리듀서는 현재의 상태와, 전달 받은 액션을 참고하여 새로운 상태를 만들어서 반환한다.
리듀서는 useReducer 를 사용할때 작성하는 리듀서와 똑같은 형태를 가지고있다.

↓카운터를 위한 리듀서를 작성한다면 아래와 같이 작성 할 수 있다.
function counter(state, action) {
  switch (action.type) {
    case 'INCREASE':
      return state + 1;
    case 'DECREASE':
      return state - 1;
    default:
      return state;
  }
}

useReducer 에선 일반적으로 default: 부분에 throw new Error('Unhandled Action')과 같이 에러를 발생시키도록 처리하는게 일반적인 반면,
리덕스의 리듀서에서는 기존 state를 그대로 반환하도록 작성해야한다.
리덕스를 사용 할 때에는 여러개의 리듀서를 만들고 이를 합쳐서 루트 리듀서 (Root Reducer)를 만들 수 있다.
루트 리듀서 안의 작은 리듀서들은 서브 리듀서라고 부른다.


스토어 (Store)
리덕스에서는 한 애플리케이션당 하나의 스토어를 만들게된다.
스토어 안에는, 현재의 앱 상태와, 리듀서가 들어가있고, 추가적으로 몇가지 내장 함수들이 있다.


디스패치 (dispatch)
디스패치는 스토어의 내장함수 중 하나다. 디스패치는 액션을 발생시키는것 이라고 생각하면 된다.
dispatch 라는 함수에는 액션을 파라미터로 전달한다. (ex. dispatch(action) 이런식)
호출을 하면, 스토어는 리듀서 함수를 실행시켜서 해당 액션을 처리하는 로직이 있다면 액션을 참고하여 새로운 상태를 만들어준다.

구독 (subscribe)
구독 또한 스토어의 내장함수 중 하나다. subscribe 함수는, 함수 형태의 값을 파라미터로 받아온다.
subscribe 함수에 특정 함수를 전달해주면, 액션이 디스패치 되었을 때 마다 전달해준 함수가 호출된다.
리액트에서 리덕스를 사용하게 될 때 보통 이 함수를 직접 사용하는 일은 별로 없다. 
대신 react-redux 라는 라이브러리에서 제공하는 connect 함수 또는 useSelector Hook 을 사용하여 리덕스 스토어의 상태에 구독한다.

리덕스 키워드

액션 (Action)
상태에 변화가 필요할 때 발생시킴 (객체하나로 표현)
type을 필수로 그외의 값들은 개발자 마음대로 생성

액션 생성함수 (Action Creator)
컴포넌트에서 더욱 쉽게 액션을 발생시키기 위함
필수 아님

리듀서 (Reducer)
변화를 일으키는 함수
현재의 상태와 액션을 참조하여 새로운 상태를 반환

스토어 (Store)
한 애플리케이션당 하나의 스토어
현재의 앱 상태와, 리듀서, 내장함수 포함

디스패치 (dispatch)
스토어의 내장함수
액션을 발생 시키는 것

구독 (subscribe)
스토어의 내장함수
subscribe 함수에 특정 함수를 전달해주면, 액션이 디스패치 되었을 때 마다 전달해준 함수가 호출
(리액트에서는 connect 함수 또는 useSelector Hook 을 사용)




리덕스의 3가지 규칙
리덕스를 프로젝트에서 사용하게 될 때 알아두고, 꼭 지켜야 할 3가지 규칙이 있다.

1. 하나의 애플리케이션 안에는 하나의스토어가 있다.
하나의 애플리케이션에선 단 한개의 스토어를 만들어서 사용한다. 여러개의 스토어를 사용하는것은 가능은하나 권장되는 방식은 아니다.
특정 업데이트가 빈번하게 일어나거나, 어플리케이션의 특정부분을 완전 분리시키게 될 때 여러개의 스토어를 만들 수 있다.
그렇게하면 개발도구를 온전히 활용하지 못하게된다.

2. 상태는 읽기전용이다.
리액트에서 state 를 업데이트 해야 할 때, setState 를 사용하고, 배열을 업데이트 해야 할 때는 배열 자체에 push 를 직접 하지 않고,
concat 같은 함수를 사용하여 기존의 배열은 수정하지 않고 새로운 배열을 만들어서 교체하는 방식으로 업데이트를 한다.
깊은 구조로 되어있는 객체를 업데이트를 할 때도 마찬가지로, 기존의 객체는 건드리지 않고 Object.assign 을 사용하거나
spread 연산자 (...) 를 사용하여 업데이트한다.

리덕스도 마찬가지다. 
기존의 상태는 건들이지 않고 새로운 상태를 생성하여 업데이트 해주는 방식으로 해주면,
나중에 개발자 도구를 통해서 뒤로 돌릴 수도 있고 다시 앞으로 돌릴 수도 있다.
리덕스에서 불변성을 유지해야 하는 이유는 내부적으로 데이터가 변경 되는 것을 감지하기 위하여 shallow equality 검사를 하기 때문이다.
이를 통하여 객체의 변화를 감지 할 때 객체의 깊숙한 안쪽까지 비교를 하는 것이 아니라 겉핥기 식으로 비교를 하여 좋은 성능을 유지할 수 있다.

3. 변화를 일으키는 함수, 리듀서는 순수한 함수여야한다.
순수한 함수, 라는 개념
리듀서 함수는 이전 상태와, 액션 객체를 파라미터로 받는다.
이전의 상태는 절대로 건들이지 않고, 변화를 일으킨 새로운 상태 객체를 만들어서 반환한다.
똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과값을 반환해야 한다.
↑ 위의 세가지 사항을 주의해야한다.
동일한 인풋이라면 언제나 동일한 아웃풋이 있어야한다. 그런데 일부 로직들 중에서는 실행 할 때마다 다른 결과값이 나타날 수도 있다.
new Date() 를 사용한다던지, 랜덤 숫자를 생성한다던지, 네트워크에 요청을 한다던지 앞의 작업들은 순수하지 않은 작업이므로, 
리듀서 함수의 바깥에서 처리해줘야한다.

리덕스의 3가지 규칙
1.하나의 애플리케이션에 하나의 스토어

2. 상태는 읽기전용
   리액트의 불변성

3. 변화를 일으키는 함수, 리듀서는 순수한 함수
   동일한 인풋 => 동일한 아웃풋
   new Date(), 랜덤 숫자 생성, 네트워크에 요청 등은 순수하지 않은 작업(?) -> 리듀서 밖에서 처리


하나의 애플리케이션 안에는 하나의 스토어를 가져야 한다.

하나의 App에는 하나의 스토어를 만들어 사용한다.
필수는 아니지만 권장하지 않는다.
개발 도구를 활용할 수 없기 때문이다.
상태는 읽기 전용이다.

기존의 상태를 수정하지 않고 새로운 상태를 생성하여 업데이트한다. (교체의 개념)
이를 통해 불변성을 유지할 수 있다. → 데이터의 변경을 감지하기 위해서는 내부 데이터까지 전부 찾아봐야 하는데 이 경우 시간이 너무 오래 걸린다. → 따라서 기존 상태의 객체를 새로운 객체로 변경하면 객체의 주소가 다르므로 변경을 쉽게 감지하는것이 가능하다.
리듀서는 순수한 함수여야 한다.

리듀서는 이전 상태와 액션 객체를 파라미터로 받는다.
이전의 상태는 건들이지 않고 변화로 새로운 상태 객체를 만든다.
동일 인풋에 대한 동일 아웃풋이 보장되어야 한다. (순수해야 한다.)
하지만 그렇지 않은 경우도 존재한다. 이때 리덕스 미들웨어라는 것을 사용한다.



리덕스 모듈 만들기
리덕스 모듈이란 다음 항목들이 모두 들어있는 자바스크립트 파일을 의미한다.

액션 타입
액션 생성함수
리듀서

리덕스를 사용하기 위해 필요한 위 항목들은 각각 다른 파일에 저장 할 수있다.

리덕스 GitHub 레포에 등록되어있는 예제 프로젝트를 보면 다음과 같이 코드가 분리되어 있다.
리덕스 예제 프로젝트 → https://github.com/reduxjs/redux/tree/master/examples/todos/src

actions
  index.js
reducers
  todos.js
  visibilityFilter.js
  index.js

↑ 위 예제 프로젝트에서는 액션과 리듀서가 서로 다른 파일에 정의되어있다.
이 코드들이 꼭 분리되어있을 필요는 없다. 이 코드들이 서로 다른 디렉터리에 서로 다른 파일로 분리되어있으면 개발이 불편해진다.
리듀서와 액션 ㄱ솬련 코드들을 하나의 파일에 몰아서 작성하는데 이를 Ducks 패턴이라고 부른다.
Ducks패턴 → https://github.com/erikras/ducks-modular-redux
리덕스 관련 코드를 분리하는 방식은 정해져있는 방식이 없어서 자유롭게 분리해도 된다.


리액트 프로젝트에 리덕스를 적용 할 때에는 react-redux 라는 라이브러리를 사용해야한다.
$ yarn add react-redux


프리젠테이셔널 컴포넌트 만들기
프리젠테이셔널 컴포넌트란, 리덕스 스토어에 직접적으로 접근하지 않고 필요한 값 또는 함수를 props 로만 받아와서 사용하는 컴포넌트다.


컨테이너 컴포넌트 만들기
컨테이너 컴포넌트란, 리덕스 스토어의 상태를 조회하거나, 액션을 디스패치 할 수 있는 컴포넌트를 의미gksek.
HTML 태그들을 사용하지 않고 다른 프리젠테이셔널 컴포넌트들을 불러와서 사용한다.


프리젠테이셔널 컴포넌트와 컨테이너 컴포넌트
위에서 리액트 컴포넌트에서 리덕스를 사용 할 때 프리젠테이셔널 컴포넌트와 컨테이너 컴포넌트를 분리해서만들었는데, 꼭 이렇게 할 필요는 없다.
개개인이 편한대로 코드를 작성하고 개발을 하면 된다.
하지만 컴포넌트를 분리해서 작성하는것이 아직까지는 정석이기 때문에 일단은 분리해서 작성하는것이 좋다고 한다.



리덕스 개발자도구 적용하기
리덕스 개발자 도구를 사용하면 현재 스토어의 상태를 개발자 도구에서 조회 할 수 있고 지금까지 어떤 액션들이 디스패치 되었는지,
그리고 액션에 따라 상태가 어떻게 변화했는지 확인 할 수 있다.
또한, 액션을 직접 디스패치 할 수도 있다.

일단 크롬(파이어폭스) 웹스토어에서 확장프로그램을 설치해야한다
설치할 확장 프로그램 링크 → https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd
그 다음에는 프로젝트에 redux-devtools-extension을 설치해야한다.
redux-devtools-extension → https://www.npmjs.com/package/redux-devtools-extension
$ yarn add redux-devtools-extension



useSelector 최적화
리액트 개발자 도구의 톱니바퀴를 눌러서 Highlight Updates 를 체크해야한다.
버튼을 클릭하면 하단의 할일 목록이 리렌더링되진 않는데 목록의 항목을 토글할때 카운터가 리렌더링된다.

useSelector를 사용해서 리덕스 스토어의 상태를 조회 할 땐 만약 상태가 바뀌지 않았으면 리렌더링하지 않는다.
TodosContainer 의 경우 카운터 값이 바뀔 때 todos 값엔 변화가 없으니까, 리렌더링되지 않는다.
const todos = useSelector(state => state.todos);

반면 CounterContainer는
const { number, diff } = useSelector(state => ({
  number: state.counter.number,
  diff: state.counter.diff
}));
CounterContainer에서는 사실상 useSelector Hook 을 통해 매번 렌더링 될 때마다 새로운 객체 { number, diff }를 만드는 것이기 때문에
상태가 바뀌었는지 바뀌지 않았는지 확인을 할 수 없어서 낭비 렌더링이 이루어지고 있다.

위의 현상들을 최적화하기 위해서 두가지 방법이 있다.

1. useSelector 를 여러번 사용한다.
const number = useSelector(state => state.counter.number);
const diff = useSelector(state => state.counter.diff);
이렇게 하면 해당 값들 하나라도 바뀌었을 때에만 컴포넌트가 리렌더링된다.

2. react-redux의 shallowEqual 함수를 useSelector의 두번째 인자로 전달해주는 것이다.
import React from 'react';
import { useSelector, useDispatch, shallowEqual } from 'react-redux';
import Counter from '../components/Counter';
import { increase, decrease, setDiff } from '../modules/counter';

function CounterContainer() {
  // useSelector는 리덕스 스토어의 상태를 조회하는 Hook이다.
  // state의 값은 store.getState() 함수를 호출했을 때 나타나는 결과물과 동일하다.
  const { number, diff } = useSelector(
    state => ({
      number: state.counter.number,
      diff: state.counter.diff
    }),
    shallowEqual
  );

  (...)
useSelector 의 두번째 파라미터는 equalityFn다.
equalityFn?: (left: any, right: any) => boolean
이전 값과 다음 값을 비교하여 true가 나오면 리렌더링을 하지 않고 false가 나오면 리렌더링을 한다.

shallowEqual은 react-redux에 내장되어있는 함수로서, 객체 안의 가장 겉에 있는 값들을 모두 비교해준다.
여기서 겉에 있는 값이란, 만약 다음과 같은 객체가 있다면

const object = {
  a: {
    x: 3,
    y: 2,
    z: 1
  },
  b: 1,
  c: [{ id: 1 }]
}
가장 겉에 있는 값은 object.a, object.b, object.c 다.
shallowEqual 에서는 해당 값들만 비교하고 object.a.x 또는 object.c[0] 값은 비교하지 않는다.



connect 함수
connect 함수는 컨테이너 컴포넌트를 만드는 또 다른 방법이다.
이 함수는 앞으로도 잘 쓸일은 없다. useSelector, useDispatch가 더 편해서 라는 이유 때문이다.

리액트 컴포넌트를 만들 때에는 함수형 컴포넌트로 만드는 것을 우선시해야 하고, 꼭 필요할 때에만 클래스형 컴포넌트로 작성을 해야한다.
만약 클래스형 컴포넌트로 작성을 하게 되는 경우에는 Hooks 를 사용하지 못하기 때문에 connect 함수를 사용해야한다.

2019년 이전에 작성된 리덕스와 연동된 컴포넌트들은 connect 함수로 작성되었을거다.
connect 함수가 사라지는것이 아니기 때문에 예전에 만든 컨테이너 컴포넌트들을 함수형으로 변환 할 필요는 없다.
나중에 리액트 컴포넌트를 유지보수 할 일이 있다면 connect를 접할 수 있다.
새로운 컨테이너 컴포넌트를 만들때 connect를 사용할 일이 별로 없겠지만 이 connect함수가 어떻게 작동하는지는 알아야한다.


HOC란?
connect는 HOC다. HOC 개념정리 사이트 링크 → https://velopert.com/3537
HOC란, Higher-Order Component의 약자로, 리액트 컴포넌트를 개발하는 하나의 패턴으로 컴포넌트의 로직을 재활용 할 때 유용한 패턴이다.
ex. 특정함수 또는 값을 props로 받아와서 사용하고 싶은 경우에 이러한 패턴을 사용한다.

리액트에 Hook이 도입전에 HOC 패턴이 자주 사용됬었는데 리액트에 Hook이 도입된 이후 HOC를 만들 이유가 사라졌다.
ㄴ 커스텀 Hook을 만드는건 쉬운편이라고 한다.

HOC의 용도는 "컴포넌트를 특정 함수로 감싸서 특정 값 또는 함수를 props로 받아와서 사용 할 수 있게 해주는 패턴" 정도로만 알아두면 된다.
↓ HOC 컬렉션 라이브러리인 recompose라는 라이브러리를 보면 HOC를 통해 어떤것을 하는지 감을 잡을 수 있다.
const enhance = withState('counter', 'setCounter', 0)
const Counter = enhance(({ counter, setCounter }) =>
  <div>
    Count: {counter}
    <button onClick={() => setCounter(n => n + 1)}>Increment</button>
    <button onClick={() => setCounter(n => n - 1)}>Decrement</button>
  </div>
)

useState와 비슷한 느낌으로 withState 함수를 사용해서 enhance라는 컴포넌트에 props로 특정 값과 함수를 넣어주는 함수를 만들었다.
컴포넌트를 만들 때 enhance로 감싸주는 원하는 값과 함수를 props를 통하여 사용 할 수 있다.


1. mapStateToProps 의 두번째 파라미터 ownProps
mapStateToProps에서는 두번째 파라미터 ownProps를 받아올 수 있는데, 이 파라미터는 생략해도 되는 파라미터다.
이 값은 컨테이너 컴포넌트를 렌더링 할 때 직접 넣어주는 props를 가르킨다.
<CounterContainer myValue={1} /> 이라고 하면 { myValue: 1 } 값이 ownProps가 된다.

↓이 두번째 파라미터는 아래와 같은 용도로 사용 할 수 있다
const mapStateToProps = (state, ownProps) => ({
  todo: state.todos[ownProps.id]
})
리덕스에서 어떤 상태를 조회 할 지 설정하는 과정에서 현재 받아온 props에 따라 다른 상태를 조회 할 수 있다.

2. connect 의 3번째 파라미터 mergeProps
mergeProps는 connect 함수의 세번째 파라미터이며, 생략해도 되는 파라미터다. 이 파라미터는 컴포넌트가 싫제로 전달받게될 props를 정의한다.
(stateProps, dispatchProps, ownProps) => Object
이 함수를 따로 지정하지 않으면 결과는 { ...ownProps, ...stateProps, ...dispatchProps }다. (쓸일이 사실상 없다고 한다.)

3. connect의 4번째 파라미터 options
connect 함수를 사용 할 때 이 컨테이너 컴포넌트가 어떻게 동작할지에 대한 옵션을 4번째 파라미터를 통해 설정 할 수 있다.
이는 생략해도 되는 파라미터로, 이 옵션들은 따로 커스터마이징하게 되는 일이 별로 없다.
자세한 내용은 좌측 의 링크를 통해서 확인하자 → https://react-redux.js.org/api/connect#options-object
이 옵션을 통해서 Context 커스터마이징, 최적화를 위한 비교 작업 커스터마이징 및 ref 관련 작업을 할 수 있다.

※ 참고내용
https://react-redux.js.org/using-react-redux/connect-mapstate 에 따르면mapStateToProps 는 스토어 상태가 변할 때마다 호출된다고 한다.
https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-the-mapdispatchtoprops-function-with-bindactioncreators 에 따르면
mapDispatchToProps 는 bind된 개별 액션들을 dispatch할 때마다 호출된다.


